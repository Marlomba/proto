syntax = "proto3";

package LiveView;


option go_package = "LiveView/proto/grps";

service LiveViewReturn{
  //агент youtuba
  rpc ServiceYouTube(RequestGetData) returns (ResponseStreamData);
}

service Telegram{
  //агент telegram
  rpc GetData(RequestData) returns (ResponseData);
}

service Reddit{
    //агент reddit
    rpc RedditGetData(RequestDataReddit) returns (ResponseDataReddit);
}

// youtuba
message RequestGetData{
  int32 idUser = 1;
  repeated Arrayurl url = 2;
}

message ResponseStreamData{
  int32 idUser = 1;
  repeated Arrayurl urlvideo =2;
}

message Arrayurl{
  string name = 1;
  string url = 2;
  string dateservice = 3;
  string datascan = 4;
}


// telegram
message RequestData{
    int32 id_user = 1;
    repeated string name_channel = 2;
}



message ResponseData{
  int32 id_data = 1;
  repeated ArrayPost post = 2;
}


message ArrayPost{
  string Channel_Name = 1;
  string Text = 2;
  repeated IMGS img = 3;
  string CreatedAt = 4;
  string ScaningAt =5;
}

message IMGS{
    string url_img = 2;
}

//reddit

message RequestDataReddit{
  int32 id_user = 1;
  repeated string link = 2;
}

message ResponseDataReddit{
  repeated ArrayPostReddit post = 1;
}

message ArrayPostReddit{
  string link = 1;
  string Text = 2;
  repeated IMGS img = 3;
}



//команда для генерации кода
//protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/grps.proto

//команда для запуска клиента для теста 
// .\evans proto/generate/sum.proto -p 8080



/* зависимости для работы с gRPC
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

go get -u google.golang.org/protobuf/cmd/protoc-gen-go
go install google.golang.org/protobuf/cmd/protoc-gen-go

go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc

*/







